name: "Build and Release GitMentor"

on:
  push:
    branches: [main, dev]
    tags: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      create_release:
        description: "Create GitHub Release"
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  LIBPNG_NO_WARN: 1
  RUST_LOG: error

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target universal-apple-darwin"
            target: "universal-apple-darwin"
            arch: "universal"
          - platform: "ubuntu-22.04"
            args: ""
            target: "x86_64-unknown-linux-gnu"
            arch: "x86_64"
          - platform: "windows-latest"
            args: ""
            target: "x86_64-pc-windows-msvc"
            arch: "x86_64"

    runs-on: ${{ matrix.platform }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "GitMentor-Lite/package-lock.json"

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./GitMentor-Lite/src-tauri -> target"

      - name: Install frontend dependencies
        working-directory: ./GitMentor-Lite
        run: npm ci

      - name: Build frontend
        working-directory: ./GitMentor-Lite
        run: npm run build

      - name: Build Tauri app
        working-directory: ./GitMentor-Lite
        run: npm run tauri build -- ${{ matrix.args }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

      - name: Upload artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gitmentor-windows-${{ matrix.arch }}
          path: |
            GitMentor-Lite/src-tauri/target/release/bundle/msi/*.msi
            GitMentor-Lite/src-tauri/target/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: gitmentor-macos-${{ matrix.arch }}
          path: |
            GitMentor-Lite/src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            GitMentor-Lite/src-tauri/target/universal-apple-darwin/release/bundle/macos/*.app

      - name: Upload artifacts (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: gitmentor-linux-${{ matrix.arch }}
          path: |
            GitMentor-Lite/src-tauri/target/release/bundle/deb/*.deb
            GitMentor-Lite/src-tauri/target/release/bundle/rpm/*.rpm
            GitMentor-Lite/src-tauri/target/release/bundle/appimage/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.create_release == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -la ./artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: GitMentor ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          body: |
            ## GitMentor ${{ github.ref_name }}

            ### 🚀 新功能
            - AI 驱动的 Git 提交消息生成
            - 分层提交管理
            - 多语言支持（19种语言）
            - 分支切换和远程同步

            ### 📦 下载说明
            - **Windows**: 下载 `.msi` 安装包
            - **macOS**: 下载 `.dmg` 磁盘映像
            - **Linux**: 下载 `.deb` (Ubuntu/Debian) 或 `.rpm` (CentOS/RHEL) 或 `.AppImage` (通用)

            ### 🔧 系统要求
            - Node.js 16+
            - Git 2.30+
            - 支持的操作系统：Windows 10+, macOS 10.15+, Ubuntu 20.04+

      - name: Find and upload release assets
        run: |
          # 查找并上传所有构建产物
          find ./artifacts -type f \( -name "*.msi" -o -name "*.exe" -o -name "*.dmg" -o -name "*.app" -o -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" \) -exec echo "Found: {}" \;

          # 上传 Windows 文件
          for file in ./artifacts/gitmentor-windows-x86_64/*.msi; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading Windows MSI: $filename"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done

          for file in ./artifacts/gitmentor-windows-x86_64/*.exe; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading Windows EXE: $filename"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done

          # 上传 macOS 文件
          for file in ./artifacts/gitmentor-macos-universal/*.dmg; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading macOS DMG: $filename"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done

          # 上传 Linux 文件
          for file in ./artifacts/gitmentor-linux-x86_64/*.deb; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading Linux DEB: $filename"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done

          for file in ./artifacts/gitmentor-linux-x86_64/*.rpm; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading Linux RPM: $filename"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done

          for file in ./artifacts/gitmentor-linux-x86_64/*.AppImage; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              echo "Uploading Linux AppImage: $filename"
              gh release upload ${{ github.ref_name }} "$file" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
