name: "Draft Release"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version (e.g., v1.0.0)"
        required: true
        type: string
      prerelease:
        description: "Is this a pre-release?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  create-draft:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate version format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "错误: 版本格式不正确。应该是 vX.Y.Z 或 vX.Y.Z-suffix 格式"
            exit 1
          fi

      - name: Check if tag exists
        run: |
          if git rev-parse "${{ github.event.inputs.version }}" >/dev/null 2>&1; then
            echo "错误: 标签 ${{ github.event.inputs.version }} 已存在"
            exit 1
          fi

      - name: Update version in files
        run: |
          VERSION="${{ github.event.inputs.version }}"
          VERSION_NUMBER="${VERSION#v}"  # 移除 v 前缀

          echo "更新版本号到 $VERSION_NUMBER"

          # 更新 package.json
          npm version $VERSION_NUMBER --no-git-tag-version --prefix GitMentor-Lite

          # 更新 Cargo.toml (只更新第3行的版本，这是 [package] 部分的版本)
          cd GitMentor-Lite/src-tauri
          # 使用行号精确更新，避免误修改依赖版本
          sed -i "3s/version = .*/version = \"$VERSION_NUMBER\"/" Cargo.toml

          # 更新 tauri.conf.json
          cd ../..
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION_NUMBER\"/" GitMentor-Lite/src-tauri/tauri.conf.json

      - name: Generate changelog
        id: changelog
        run: |
          echo "生成更新日志..."
          CHANGELOG="GitMentor 发布 - AI 驱动的 Git 提交消息生成工具"
          echo "changelog=$CHANGELOG" >> $GITHUB_OUTPUT

      - name: Create draft release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: GitMentor ${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: true
          prerelease: ${{ github.event.inputs.prerelease }}

      - name: Create release branch and PR
        run: |
          BRANCH="release/${{ github.event.inputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git checkout -b $BRANCH
          git add GitMentor-Lite/package.json GitMentor-Lite/src-tauri/Cargo.toml GitMentor-Lite/src-tauri/tauri.conf.json
          git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
          git push origin $BRANCH

          echo "::notice::Created release branch: $BRANCH"
          echo "::notice::Please create a pull request to merge version changes"

      - name: Create tag (after PR merge)
        run: |
          echo "::notice::After merging the PR, manually create tag:"
          echo "::notice::git tag ${{ github.event.inputs.version }}"
          echo "::notice::git push origin ${{ github.event.inputs.version }}"

      - name: Summary
        run: |
          echo "## 🎉 草稿发布已创建" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **版本**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **预发布**: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **状态**: 草稿 (需要手动发布)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 下一步操作" >> $GITHUB_STEP_SUMMARY
          echo "1. 检查草稿发布的内容" >> $GITHUB_STEP_SUMMARY
          echo "2. 等待构建工作流完成" >> $GITHUB_STEP_SUMMARY
          echo "3. 验证构建产物" >> $GITHUB_STEP_SUMMARY
          echo "4. 发布草稿版本" >> $GITHUB_STEP_SUMMARY
