name: "Release GitMentor"

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      version:
        description: "版本号 (示例: v0.1.4，不填则自动读取 package.json)"
        required: false
        type: string
      create_tag:
        description: "是否创建新的 Git 标签"
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  publish-tauri:
    permissions:
      contents: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整 git 历史，确保可以读取 tag

      # 获取版本号 - Author: Evilek, Date: 2025-01-15
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            VERSION="${{ github.ref_name }}"
            echo "从 tag 读取版本号: $VERSION"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "从手动输入读取版本号: $VERSION"
          else
            PACKAGE_VERSION=$(node -p "require('./GitMentor-Lite/package.json').version")
            VERSION="v$PACKAGE_VERSION"
            echo "从 package.json 自动读取版本号: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "最终使用的版本号: $VERSION"

          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "need_update=true" >> $GITHUB_OUTPUT
            echo "需要更新版本文件"
          else
            echo "need_update=false" >> $GITHUB_OUTPUT
            echo "版本文件保持不变"
          fi

      # 手动触发时更新版本文件并创建 PR
      - name: Update version files and create PR
        if: steps.get_version.outputs.need_update == 'true'
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
          DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          OWNER: ${{ github.repository_owner }}
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"

          $VERSION = $env:VERSION
          $CLEAN_VERSION = $VERSION -replace '^v', ''
          $DEFAULT_BRANCH = if ([string]::IsNullOrWhiteSpace($env:DEFAULT_BRANCH)) { "main" } else { $env:DEFAULT_BRANCH }
          $BRANCH_NAME = "release/$VERSION"
          Write-Host "创建或更新版本分支: $BRANCH_NAME (基线分支: $DEFAULT_BRANCH)"

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin --prune

          git rev-parse --verify "origin/$BRANCH_NAME" > $null 2>&1
          $remoteBranchExists = $LASTEXITCODE -eq 0

          if ($remoteBranchExists) {
            Write-Host "远程已存在版本分支，直接同步最新提交"
            git checkout -B $BRANCH_NAME "origin/$BRANCH_NAME"
          }
          else {
            Write-Host "远程不存在版本分支，基于 $DEFAULT_BRANCH 创建"
            git checkout -B $BRANCH_NAME "origin/$DEFAULT_BRANCH"
          }

          # 更新版本号文件
          $packageJson = Get-Content "GitMentor-Lite/package.json" -Raw | ConvertFrom-Json
          $packageJson.version = $CLEAN_VERSION
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content "GitMentor-Lite/package.json"
          Write-Host "✅ 已更新 package.json"

          $cargoContent = Get-Content "GitMentor-Lite/src-tauri/Cargo.toml"
          $cargoContent[2] = "version = `"$CLEAN_VERSION`""
          $cargoContent | Set-Content "GitMentor-Lite/src-tauri/Cargo.toml"
          Write-Host "✅ 已更新 Cargo.toml"

          $tauriConfig = Get-Content "GitMentor-Lite/src-tauri/tauri.conf.json" -Raw | ConvertFrom-Json
          $tauriConfig.version = $CLEAN_VERSION
          $tauriConfig | ConvertTo-Json -Depth 10 | Set-Content "GitMentor-Lite/src-tauri/tauri.conf.json"
          Write-Host "✅ 已更新 tauri.conf.json"

          git add GitMentor-Lite/package.json GitMentor-Lite/src-tauri/Cargo.toml GitMentor-Lite/src-tauri/tauri.conf.json
          $changes = git status --porcelain

          if ([string]::IsNullOrWhiteSpace($changes)) {
            Write-Host "⚠️ 版本号文件没有变化，跳过提交与推送"
          }
          else {
            git commit -m "chore: bump version to $VERSION"
            git push origin $BRANCH_NAME
            Write-Host "✅ 已推送版本更新分支"
          }

          $ahead = [int](git rev-list --count "origin/$DEFAULT_BRANCH..HEAD")

          if ($ahead -le 0) {
            Write-Host "ℹ️ 分支 $BRANCH_NAME 与 $DEFAULT_BRANCH 无差异，跳过 PR 创建"
            exit 0
          }

          $headers = @{
            "Authorization" = "token $env:GITHUB_TOKEN"
            "Accept" = "application/vnd.github+json"
          }

          $encodedHead = [System.Uri]::EscapeDataString("$($env:OWNER):$BRANCH_NAME")
          $encodedBase = [System.Uri]::EscapeDataString($DEFAULT_BRANCH)
          $prListUri = "https://api.github.com/repos/$($env:REPO)/pulls?head=$encodedHead&base=$encodedBase&state=open"
          $existingPr = Invoke-RestMethod -Uri $prListUri -Method Get -Headers $headers -ContentType "application/json"

          if ($existingPr.Count -gt 0) {
            Write-Host "⚠️ 已存在版本更新 PR: $($existingPr[0].html_url)"
            Write-Host "::notice::版本更新 PR 已存在，请直接检查并合并"
            exit 0
          }

          $PR_BODY = @"
          ## 🚀 版本更新 $VERSION

          该 PR 由 Release workflow 自动生成，用于同步版本号改动。

          ### 📦 本次更新
          - 更新 package.json 版本号至 $CLEAN_VERSION
          - 更新 Cargo.toml 版本号至 $CLEAN_VERSION
          - 更新 tauri.conf.json 版本号至 $CLEAN_VERSION

          ### ✅ 下一步
          1. 合并本 PR
          2. 再次执行 Release workflow
          "@

          $prData = @{
            title = "chore: bump version to $VERSION"
            head = $BRANCH_NAME
            base = $DEFAULT_BRANCH
            body = $PR_BODY
          } | ConvertTo-Json

          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/$($env:REPO)/pulls" -Method Post -Headers $headers -Body $prData -ContentType "application/json"
            Write-Host "✅ 已创建 Pull Request: $($response.html_url)"
            Write-Host "::notice::已生成版本更新 PR，请合并后重新运行 Release workflow"
            Write-Host "::notice::PR 合并前将自动跳过后续构建步骤"
            exit 0
          }
          catch {
            Write-Host "❌ 创建 PR 失败: $($_.Exception.Message)"
            Write-Host "请手动创建 PR：$BRANCH_NAME -> $DEFAULT_BRANCH"
            Write-Host "::error::请手动处理版本更新后重新运行 workflow"
            exit 1
          }

      # 需要时创建 tag（PR 合并后再执行）
      - name: Create tag
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_tag == 'true' && steps.get_version.outputs.need_update != 'true'
        run: |
          $VERSION = "${{ steps.get_version.outputs.version }}"
          Write-Host "创建 tag: $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
        shell: pwsh

      - name: setup node
        if: steps.get_version.outputs.need_update != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: GitMentor-Lite/package-lock.json

      - name: install Rust stable
        if: steps.get_version.outputs.need_update != 'true'
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        if: steps.get_version.outputs.need_update != 'true'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./GitMentor-Lite/src-tauri -> target"

      - name: install frontend dependencies
        if: steps.get_version.outputs.need_update != 'true'
        working-directory: GitMentor-Lite
        run: npm ci

      - uses: tauri-apps/tauri-action@v0
        if: steps.get_version.outputs.need_update != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: "./GitMentor-Lite"
          tagName: ${{ steps.get_version.outputs.version }}
          releaseName: "GitMentor ${{ steps.get_version.outputs.version }}"
          releaseBody: |
            ## GitMentor ${{ steps.get_version.outputs.version }}

            ### ✨ 新功能
            - AI 辅助生成 Git 提交信息
            - 分层提交管理
            - 多语言支持（19 种语言）
            - 支持本地/远程仓库同步

            ### 📦 发布说明
            - **Windows**: 提供 `.msi` 安装包

            ### 🛠 系统要求
            - Windows 10+
            - Git 2.30+
          releaseDraft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          args: ${{ matrix.args }}
