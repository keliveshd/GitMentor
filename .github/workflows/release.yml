name: "Release GitMentor"

on:
  push:
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      version:
        description: "版本号 (例如: v0.1.4, 留空则自动从package.json读取)"
        required: false
        type: string
      create_tag:
        description: "是否创建新的Git标签"
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整的git历史，用于tag操作

      # 获取版本号 - Author: Evilek, Date: 2025-01-15
      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
            # 从tag推送获取版本号
            VERSION="${{ github.ref_name }}"
            echo "从tag获取版本号: $VERSION"
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            # 从手动输入获取版本号
            VERSION="${{ github.event.inputs.version }}"
            echo "从输入获取版本号: $VERSION"
          else
            # 从package.json自动获取版本号
            PACKAGE_VERSION=$(node -p "require('./GitMentor-Lite/package.json').version")
            VERSION="v$PACKAGE_VERSION"
            echo "从package.json获取版本号: $VERSION"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "最终版本号: $VERSION"

          # 设置是否需要更新文件的标志
          if [ -n "${{ github.event.inputs.version }}" ]; then
            echo "need_update=true" >> $GITHUB_OUTPUT
            echo "需要更新版本文件"
          else
            echo "need_update=false" >> $GITHUB_OUTPUT
            echo "无需更新版本文件"
          fi

      # 更新版本文件并创建PR（仅在手动输入版本号时） - Author: Evilek, Date: 2025-01-15
      - name: Update version files and create PR
        if: steps.get_version.outputs.need_update == 'true'
        run: |
          $VERSION = "${{ steps.get_version.outputs.version }}"
          # 移除v前缀获取纯版本号
          $CLEAN_VERSION = $VERSION -replace '^v', ''
          $BRANCH_NAME = "release/$VERSION"
          Write-Host "创建版本更新分支: $BRANCH_NAME"

          # 创建新分支
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b $BRANCH_NAME

          # 更新package.json
          $packageJson = Get-Content "GitMentor-Lite/package.json" -Raw | ConvertFrom-Json
          $packageJson.version = $CLEAN_VERSION
          $packageJson | ConvertTo-Json -Depth 10 | Set-Content "GitMentor-Lite/package.json"
          Write-Host "✅ 已更新 package.json"

          # 更新Cargo.toml (使用PowerShell替换第3行)
          $cargoContent = Get-Content "GitMentor-Lite/src-tauri/Cargo.toml"
          $cargoContent[2] = "version = `"$CLEAN_VERSION`""
          $cargoContent | Set-Content "GitMentor-Lite/src-tauri/Cargo.toml"
          Write-Host "✅ 已更新 Cargo.toml"

          # 更新tauri.conf.json
          $tauriConfig = Get-Content "GitMentor-Lite/src-tauri/tauri.conf.json" -Raw | ConvertFrom-Json
          $tauriConfig.version = $CLEAN_VERSION
          $tauriConfig | ConvertTo-Json -Depth 10 | Set-Content "GitMentor-Lite/src-tauri/tauri.conf.json"
          Write-Host "✅ 已更新 tauri.conf.json"

          # 提交更改到新分支
          git add GitMentor-Lite/package.json GitMentor-Lite/src-tauri/Cargo.toml GitMentor-Lite/src-tauri/tauri.conf.json
          git commit -m "chore: bump version to $VERSION"
          git push origin $BRANCH_NAME
          Write-Host "✅ 已推送版本更新分支"

          # 创建Pull Request
          $PR_BODY = @"
          ## 🚀 版本更新到 $VERSION

          此PR由GitHub Actions自动创建，用于更新版本号。

          ### 📋 更改内容
          - 更新 package.json 版本号到 $CLEAN_VERSION
          - 更新 Cargo.toml 版本号到 $CLEAN_VERSION
          - 更新 tauri.conf.json 版本号到 $CLEAN_VERSION

          ### ⚠️ 注意事项
          请合并此PR后，Release workflow将继续执行。
          "@

          $headers = @{
            "Authorization" = "token ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github.v3+json"
          }

          $prData = @{
            title = "chore: bump version to $VERSION"
            head = $BRANCH_NAME
            base = "${{ github.ref_name }}"
            body = $PR_BODY
          } | ConvertTo-Json

          try {
            $response = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/pulls" -Method Post -Headers $headers -Body $prData -ContentType "application/json"
            Write-Host "✅ 已创建Pull Request: $($response.html_url)"
            Write-Host "::notice::版本更新PR已创建，请合并后重新运行Release workflow"
            Write-Host "::error::Workflow暂停 - 请先合并版本更新PR，然后重新运行此workflow"
            exit 1
          } catch {
            Write-Host "❌ 创建PR失败: $($_.Exception.Message)"
            Write-Host "请手动创建PR从 $BRANCH_NAME 到 ${{ github.ref_name }}"
            Write-Host "::error::请手动处理版本更新后重新运行workflow"
            exit 1
          }
        shell: pwsh

      # 创建tag（仅在手动触发且需要时） - Author: Evilek, Date: 2025-01-15
      - name: Create tag
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.create_tag == 'true'
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "创建tag: $VERSION"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"
          cache-dependency-path: GitMentor-Lite/package-lock.json

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./GitMentor-Lite/src-tauri -> target"

      - name: install frontend dependencies
        working-directory: GitMentor-Lite
        run: npm ci

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          projectPath: "./GitMentor-Lite"
          tagName: ${{ steps.get_version.outputs.version }}
          releaseName: "GitMentor ${{ steps.get_version.outputs.version }}"
          releaseBody: |
            ## GitMentor ${{ steps.get_version.outputs.version }}

            ### 🚀 新功能
            - AI 驱动的 Git 提交消息生成
            - 分层提交管理
            - 多语言支持（19种语言）
            - 分支切换和远程同步

            ### 📦 下载说明
            - **Windows**: 下载 `.msi` 安装包

            ### 🔧 系统要求
            - Windows 10+
            - Git 2.30+
          releaseDraft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
          args: ${{ matrix.args }}
